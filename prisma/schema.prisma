generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Mood {
  VERY_SAD
  SAD
  NEUTRAL
  HAPPY
  VERY_HAPPY
}

enum NoteSize {
  SMALL
  MEDIUM
  LARGE
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
  OUTDATED
}

model User {
  id             Int         @id @default(autoincrement())
  name           String
  email          String      @unique
  password       String
  birthDate      DateTime
  gender         String
  avatar         String?
  createdAt      DateTime    @default(now())
  deletedAt      DateTime?
  isAdmin        Boolean     @default(false)
  isPremium      Boolean     @default(false)
  is2FAEnabled   Boolean     @default(false)
  isPsychologist Boolean     @default(false)
  twoFactors     TwoFactor[]
  notes   Note[]
  goals   Goal[]
  weeklyReports  WeeklyReport[]
  monthtly MonthlyReport[]
}

model TwoFactor {
  id        Int      @id @default(autoincrement())
  userId    Int
  codeHash  String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyQuote {
  id           Int                    @id @default(autoincrement())
  text         String
  author       String
  createdAt    DateTime               @default(now())
  translations DailyQuoteTranslation[] @relation("QuoteTranslations")
}

model Color {
  id        Int      @id @default(autoincrement())
  name      String
  hexCode   String   @unique
  createdAt DateTime @default(now())
  notes     Note[]
}

model DailyQuoteTranslation {
  id        Int        @id @default(autoincrement())
  quoteId   Int
  language  String
  text      String
  createdAt DateTime   @default(now())
  quote     DailyQuote @relation("QuoteTranslations", fields: [quoteId], references: [id], onDelete: Cascade)
}

model Note {
  id        Int      @id @default(autoincrement())
  userId    Int
  mood      Mood
  size      NoteSize     
  title     String
  content   String
  colorid   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  color     Color?   @relation(fields: [colorid], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  dueDate     DateTime?
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WeeklyReport {
  id               Int       @id @default(autoincrement())
  userId           Int
  startDate        DateTime
  endDate          DateTime
  averageMood      Mood?
  moodDistribution Json
  notesCount       Int       @default(0)
  completedGoals   Int       @default(0)
  pendingGoals     Int       @default(0)
  moodTrend        Int?      // -1, 0, 1
  mostActiveHour   Int?
  daysActive       Int       @default(0)
  alert            Boolean   @default(false)
  therapistNotes   String?
  createdAt        DateTime  @default(now())
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MonthlyReport {
  id           Int       @id @default(autoincrement())
  userId       Int
  month        DateTime
  averageMood  Mood
  moodDistribution Json
  moodVolatility Float
  bestWeek     DateTime?
  worstWeek    DateTime?
  totalNotes   Int
  activeDays   Int
  mostActiveHour Int?
  completedGoals Int
  pendingGoals Int
  successRate  Float
  progressComparedToLastMonth Json?
  alert        Boolean
  recommendation String?
  createdAt    DateTime @default(now())

  user         User @relation(fields: [userId], references: [id])
}